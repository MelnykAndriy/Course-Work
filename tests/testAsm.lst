    1       
    2       
    3       
    4       0000                       code segment 
    5       
    6       
    7       0000                       begin:
    8       
    9       0000 E9 0117                       jmp @end           
    10      0003 FB                            sti 
    11      0004                       @sLbl:
    12      
    13      0004 88 0E 0000 R                  mov ds : var$1, cl
    14      0008 65: 66| 23 16 0007 R          and edx, gs : ident
    15      000E 64: 12 16 0013 R              adc dl, fs : id7
    16      0013 26: 22 00                     and al,es:[bx + si]
    17      0016 0C 6E                         or al,01101110b
    18      
    19      0018 F7 36 0001 R                  div ds:varD
    20      001C F7 36 0016 R                  div word ptr ds:id9 
    21      0020 65: F6 36 0014 R              div byte ptr gs:id8
    22      0025 26: 66| F7 36 0012 R          div dword ptr es:id6
    23      
    24      002B EB 08 90                      jmp @def
    25      002E 0C                            lol1 db 12
    26      002F 04C9                          lol2 dw 1225
    27      0031 0012B198                      lol3 dd 1225112
    28      0035                       @def:
    29      
    30      0035 2E: 88 16 002E R              mov cs:lol1, dl
    31      003A 2E: 89 0E 002F R              mov cs:lol2, cx
    32      003F 2E: 66| 89 0E 0031 R          mov cs:lol3, ecx
    33      
    34      0045 65: 67| F6 34 32              div byte ptr gs:[edx + esi]
    35      004A 26: 67| F7 34 0B              div word ptr es:[ebx + ecx]
    36      
    37      004F EB FE                     @loop: jmp @loop
    38      
    39      0051 26: 66| 67| F7 34 33          div dword ptr es:[ebx + esi]
    40      0057 64: F7 31                     div word ptr fs:[bx + di]
    41      
    42      005A 26: 66| 67| F7 34 0B          div dword ptr es:[ebx][ecx]
    43      
    44      0060 26: 66| 67| 23 0C 0C          and ecx,dword ptr es:[esp][ecx]
    45      0066 65: 67| 13 1C 16              adc bx,word ptr gs:[esi + edx]
    46      
    47      006B 64: 67| 88 04 39              mov byte ptr fs:[ecx + edi],al
    48      
    49      0070 F7 E2                         mul dx
    50      0072 F7 E1                         mul cx 
    51      0074 F7 E0                         mul ax
    52      0076 F6 E0                         mul al
    53      0078 F7 E7                         mul di
    54      007A 66| F7 E1                     mul ecx
    55      007D 66| F7 E0                     mul eax
    56      0080 66| F7 E3                     mul ebx
    57      
    58      0083 64: 66| 85 16 0003 R          test fs:var?2 ,edx   
    59      0089 0F 83 FF77                    jae @sLbl    
    60      
    61      008D 89 1E 000B R                  mov ds:VAR@3,bx 
    62      0091 81 C9 AB91                    or cx,0AB91h
    63      0095 66| 89 0E 0003 R              mov ds:var?2,ecx
    64      009A 66| 23 01                     and eax,dword ptr ds:[bx + di]
    65      
    66      009D                       @tLbl:  
    67      009D 84 06 000D R                  test ds:var_4,al
    68      00A1 73 4D 90 90                   jae @eLbl     
    69      
    70      00A5 EB F6                         jmp @tLbl  
    71      
    72      00A7 65: 12 06 000D R              adc al,gs:var_4 
    73      
    74      00AC 64: 66| 67| 13 04 38          adc eax, fs:[eax + edi]
    75      00B2 67| 12 04 37                  adc al, ds : [edi + esi]
    76      
    77      00B6 23 19                         and bx , ds : [bx + di]
    78      00B8 65: 66| 23 00                 and eax , gs : [bx + si]
    79      
    80      00BC 36: 88 10                     mov  ss : [bx + si] , dl 
    81      00BF 2E: 67| 89 1C 37              mov  cs : [edi + esi], bx
    82      
    83      00C4 65: 67| 84 04 01              test gs : [ecx + eax ] , al 
    84      00C9 26: 66| 85 03                 test es : [ bp + di ] , eax
    85      
    86      00CD 0C 01                         or al,1
    87      00CF 0D 0100                       or ax,256
    88      00D2 66| 0D 000FFFFF               or eax,0fffffh   
    89      00D8 66| 81 C9 86AF10C6            or ecx,086af10c6h  
    90      00DF EB 0F 90                      jmp @eLbl 
    91      
    92      
    93      00E2 80 C9 EC                      or cl,-20
    94      00E5 81 C9 0FFF                    or cx,0fffh
    95      00E9 66| 81 C9 000AC000            or ecx,0ac000h  
    96      
    97      00F0                       @eLbl:    
    98      
    99      00F0 83 CB 16                      or bx,22
    100     00F3 66| 83 CB FD                  or ebx,-3
    101     
    102     
    103     
    104     
    105     00F7 80 CE 9C                      or dh , 12 * 01101b 
    106     00FA 81 C9 F59C                    or cx , (12 - 0A7h + (4 - 6/3)*11)*20
    107     00FE 83 CF EF                      or di , -(12 + 5)
    108     0101 66| 83 CB F4                  or ebx , (20 mod 0111b mod 5) - 13
    109     
    110     0105 FB                            sti 
    111     
    112     
    113     0106 26: 88 26 000E R              mov es:sVar1 , ah
    114     010B 65: 67| 88 0C 32              mov byte ptr gs:[edx + esi],cl
    115     0110 65: 88 16 000F R              mov gs:sVar2 , dl
    116     0115 66| 89 26 0010 R              mov dword ptr ds:sVar3,esp
    117     
    118     011A                       @end:
    119     
    120     011A                       code ends 
    121     
    122     0000                       data segment 
    123     0000 C0                            var$1 db  - 11000000b + 10000000b
    124     0001 0111                          varD dw 0f3h + 011b * 10  
    125     0003 00003109                      var?2 dd 12551 + 0 + 2*1    
    126     0007 0000014E                      ident dd 125*2 - 10 + 25/5 + 89 
    127     000B 01F5                          var@3 dw 765o   
    128     000D F1                            var_4 db -15
    129     000E FF                            sVar1 db 5 +++ -6 
    130     000F 1C                            sVar2 db 5 * 6 - 2   
    131     0010 0005                          sVar3 dw ((4 + 2)*5 - 101b + 064h)/31q  
    132     0012 0E                            id6 db 0 + (-1)*14*(-1) + 0  
    133     0013 40                            id7 db -1 * 64 * -1  
    134     0014 0000                          id8 dw 8 mod 2   
    135     0016 00000007                      id9 dd ((9 mod 2 + 0fh) mod 17 ) mod ( -1 + 4 * 3 - ( 4 / 2) ) 
    136     001A                       data ends 
    137     
    138                                        end begin

Summary : 0 Warnings, 0 Errors were found.


Segments : 
                N a m e         		Size	Length
CODE                                    16 bit  011A    
DATA                                    16 bit  001A    

Symbols : 
                N a m e         		Type	 Value	 Attr
LOL1                                    BYTE     002E    CODE
LOL2                                    WORD     002F    CODE
LOL3                                    DWORD    0031    CODE
BEGIN                                   NEAR     0000    CODE
@SLBL                                   NEAR     0004    CODE
@DEF                                    NEAR     0035    CODE
@LOOP                                   NEAR     004F    CODE
@TLBL                                   NEAR     009D    CODE
@ELBL                                   NEAR     00F0    CODE
@END                                    NEAR     011A    CODE
VAR$1                                   BYTE     0000    DATA
VARD                                    WORD     0001    DATA
VAR?2                                   DWORD    0003    DATA
IDENT                                   DWORD    0007    DATA
VAR@3                                   WORD     000B    DATA
VAR_4                                   BYTE     000D    DATA
SVAR1                                   BYTE     000E    DATA
SVAR2                                   BYTE     000F    DATA
SVAR3                                   WORD     0010    DATA
ID6                                     BYTE     0012    DATA
ID7                                     BYTE     0013    DATA
ID8                                     WORD     0014    DATA
ID9                                     DWORD    0016    DATA

